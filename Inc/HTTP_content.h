/**
  ******************************************************************************
  * @file    HTTP_content.h
  * @author  Ostap Kostyk
  * @brief   Contain HTTP content for the HTTP server implemented in HTTP_Server
  *          class
  *
  ******************************************************************************
  * Copyright (C) 2018  Ostap Kostyk
  *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version provided that the redistributions
  * of source code must retain the above copyright notice.
  *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  * GNU General Public License for more details.
  *
  * You should have received a copy of the GNU General Public License
  * along with this program.  If not, see <http://www.gnu.org/licenses/>.
  ******************************************************************************
  * Author contact information: Ostap Kostyk, email: ostap.kostyk@gmail.com
  ******************************************************************************
 */
#ifndef HTTP_CONTENT_H_
#define HTTP_CONTENT_H_

extern "C" {
#include "common.h"
}

/* USER DEFINES */
#define HTML_RENDER_STR_SIZE    100
#define HTML_RENDER_STR_SIZE2   50
/* END OF USER DEFINES */

enum class HTTP_PageType{Static = 0, Dynamic};  //  Static means that all fields of page are constant and do not change; Dynamic means that there is/are fields generated by application (rendered). This flag sets by application during initialization
enum class HTTP_VariableType{Text = 0, Integer = 1, Float = 2};

typedef struct
{
  const char *pContent;     //  pointer on HTML content string
  const size_t Size;        //  size of HTML content string. Zero value means that the string is dynamicly generated and therefore size should be calculated every time (e.g. by strlen)
}HTTP_Page;

typedef struct
{
    HTTP_Page *pPage;
    const int PageParts;
    const char *pPageName;
    HTTP_PageType Type;
}HTTPServerContent_t;

typedef struct
{
    const char *Name;       //  Variable name in HTTP protocol
    HTTP_VariableType Type; //  Variable type
    bool NewValue;          //  true: new value received from http client
    char *pText;            //  text value of variable if Type is Text
    size_t TextSize;        //  Size of string by reference pText
    int ValueInteger;       //  Integer value of variable if Type is Integer
    float ValueFloat;       //  Float value of variable if Type is Float
}HTTPVariable_t;

extern HTTPServerContent_t HTTPServerContent[]; //  !!! Last element must be initialized with zeros, indicating end of array. First page must be home page.
extern HTTPVariable_t   HTTPVariables[];        //  !!! Last element must be initialized with zeros, indicating end of array
extern bool HTTPVariableReceivedFlag;           //  Flag to outside indicating that at least one of variables from the list above has been received

class HTTPVariable
{
public:
    enum class HTTPVarType{Text = 0, Integer = 1, Float = 2};

    /* constructor for the Integer or Float HTTP variable type  */
    HTTPVariable(const char *Name, HTTPVarType Type);

    /* constructor for the Text variable type. Allocates TextSize bytes for the Text value received from HTTP request */
    HTTPVariable(const char *Name, HTTPVarType Type, size_t TextSize);

    bool NewValueReceived(void);    //  Variable has been received from HTTP request. Internal flag is cleared by calling this method

    /* Returns pointer on string allocated for the text value from HTTP request (not the length of received string) */
    char* GetText(void);

    /* Returns size of allocated memory for the text string */
    size_t GetMaxTextSize(void) { return TextSize; }

    int GetValueInteger(void) { return ValueInteger; }

    float GetValueFloat(void) { return ValueFloat; }

    void SetValueInteger(int Value) { ValueInteger = Value; }

    void SetValueFloat(float Value) { ValueFloat = Value; }

    static HTTPVariable* FindVariable(char* pName);

    char *pText;            //  text value of variable if Type is Text
    HTTPVarType Type;       //  Variable type
    bool NewValue;          //  true: new value received from http client
    static bool HTTPVariableReceivedFlag;

private:
    static HTTPVariable* pFirst;
    HTTPVariable* Prev;
    HTTPVariable* Next;
    bool Valid;

    const char *pName;      //  Variable name in HTTP protocol
    size_t TextSize;        //  Size of string by reference pText
    int ValueInteger;       //  Integer value of variable if Type is Integer
    float ValueFloat;       //  Float value of variable if Type is Float
};

extern HTTPVariable HTTP_VAR_BlueLEDMode;
extern HTTPVariable HTTP_VAR_BlueLEDBlinkTimeOn;
extern HTTPVariable HTTP_VAR_BlueLEDBlinkTimeOff;
extern HTTPVariable HTTP_VAR_WiFiSSID;

#endif /* HTTP_CONTENT_H_ */
